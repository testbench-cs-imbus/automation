#
# Configuration of the TA-Agent
#

import logging
import re  # filters can be defined by regex objects

# The default log level for all modules
LOGLEVEL = logging.INFO

# Login data of the TestBench CS
ACCOUNT = {
    "TBCS_BASE": "<TestBench CS server address e.g. https://cloud01-eu.testbench.com>",
    "WORKSPACE": "<workspace name>",
    "LOGIN": "<login>",
    "PASSWORD": "<password>",
}

# The intervall in seconds the agent polls from TestBench CS if it is running in loop mode
AGENT_LOOP_INTERVAL_SEC = 3

# Prefix for naming of Test Sessions where the test results are collected
TEST_SESSION_PREFIX = ""  # Format of an created Test Session name: <Test Session prefix>-<Test Suite name>-<timestamp>

# Test Cases to be processed:
# (each filter attribute is matched against the corresponding item-attribute)
TEST_CASE_FILTER = {"name": re.compile(".")}

# Test Suites to be processed:
# (each filter attribute is matched against the corresponding item-attribute)
TEST_SUITE_FILTER = {
    "name": re.compile("."),
    "status": "Active",
}

# Test Sessions to be processed:
# (each filter attribute is matched against the corresponding item-attribute)
TEST_SESSION_FILTER = {
    "name": re.compile("."),
    "status": "Ready",
}

# Products to be processed:
# (each filter attribute is matched against the corresponding item-attribute)
PRODUCT_FILTER = {
    "name": re.compile("."),
}

# Name of the custom field that describes which Test Tool should be used
ADAPTER_CUSTOM_FIELD_NAME = ""  # e.g.: Automation Tool

# If adapter is not set in TestBench CS, this one will used
ADAPTER_DEFAULT = "RobotFramework"

# If parallel custom field is not in TestBench CS, this one will be used
PARALLEL = False

# Defines if an adapter should create a defect or not
CREATE_DEFECTS = True

# ==========
# Adapter specific configuration

# Robot Framework adapter
ROBOT_FRAMEWORK = {
    "base_dir": "examples/robotframework/",
    "search_dir": ".",
    "result_dir": "test-results",
    "cleanup": True,
}

# Robot Framework adapter for KDT
ROBOT_KDT = {
    "base_dir": "examples/robotframework/",
    "script_dir": ".",
    "result_dir": "test-results",
    "resource_dir": "resources",
    "empty_string": "_void_",
    "cleanup": True,
}

# Behave adapter (BDT)
BEHAVE = {
    "base_dir": "./examples/behave/",
    "result_dir": "test-results",
    "scenario_dir": "features",
    "cleanup": False,
}

# Carla adapter (simulator)
CARLA = {
    "sc_runner": "<location of the scenario runner>",
    "host": "<Carla hostname if running remote>",
    "base_dir": "<base dir for Carla>",
    "result_dir": "<result dir>",
    "cleanup": False,
}

# CarMaker adapter (simulator)
CARMAKER = {
    "testrun_name": "Name of Test Run",
    "host": "<CarMaker hostname if running remote>",
    "base_dir": "<base dir for CarMaker>",
    "result_dir": "<result dir>",
    "cleanup": False,
}

# Cypress adapter
CYPRESS = {
    "base_dir": "./examples/cypress",  # location of the Cypres project
    "result_dir": "./test-results",  # result dir
    "cypress_bin": "./node_modules/.bin/cypress",  # Cypress binary
    "cypress_spec_folder": "./tests",  # search folder for test specification files
    "cleanup": False,
}

# ==========
# Import specific config:
TEST_CASE_TYPE = "SimpleTestCase"
FILE_EXTENSION = "xosc"
IMPORTED_CUSTOM_FIELDS = {
    "Author",
    "Date",
    "Revision",
    "Scenario Name",
    "Test Tool",
}

TEST_STEP_TYPE = "Keyword"  # Keyword or TextStep
